% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatial_ordinal.R
\name{spatial_ordinal}
\alias{spatial_ordinal}
\title{Fit a spatial ordinal model based on damage data for two building categories.}
\usage{
spatial_ordinal(
  model.1,
  model.2,
  data.1,
  data.2,
  start = NULL,
  lower.lim = rep(-Inf, 23),
  upper.lim = rep(Inf, 23)
)
}
\arguments{
\item{model.1}{An non-spatial ordinal model fitted for \code{data.1} (Building Category 1) using \code{polr} from the R package \code{MASS}.}

\item{model.2}{An non-spatial ordinal model fitted for \code{data.2} (Building Category 2) using \code{polr} from the R package \code{MASS}.}

\item{data.1}{A dataframe with the columns \code{CDF} (ordered factor), \code{logPGA} (numeric), \code{PGA} (numeric), \code{Easting} (numeric) and \code{Northing} (numeric) for Building Category 1.}

\item{data.2}{A dataframe with the columns \code{CDF} (ordered factor), \code{logPGA} (numeric), \code{PGA} (numeric), \code{Easting} (numeric) and \code{Northing} (numeric) for Building Category 2.}

\item{start}{A list of starting values for the model parameters: \code{c_factor1} (first cut-off value and cut-off ratios for Building Category 1; this is a vector with one less component than the number of damage grades), \code{c_factor2} (first cut-off value and cut-off ratios for Building Category 2; this is a vector with one less component than the number of damage grades), \code{log_phi} (log-transformed range parameter for the shared spatial field), \code{log_sigma_2} (log-transformed partial sill parameter for the shared spatial field), \code{log_phi1} (log-transformed range parameter for the Building Category 1 spatial field), \code{log_tau1_2} (log-transformed nugget parameter for the Building Category 1 spatial field), \code{log_sigma1_2} (log-transformed partial sill parameter for the Building Category 1 spatial field), \code{log_phi2} (log-transformed range parameter for the Building Category 2 spatial field), \code{log_tau2_2} (log-transformed nugget parameter for the Building Category 2 spatial field), \code{log_sigma2_2} (log-transformed partial sill parameter for the Building Category 2 spatial field), \code{log_slope1} (log-transformed slope parameter for Building Category 1) and \code{log_slope2} (log-transformed slope parameter for Building Category 2).}

\item{lower.lim}{A vector of lower bounds for the parameters (in this order): \code{log_phi}, \code{log_sigma_2}, \code{log_tau_2}, \code{log_phi1}, \code{log_tau1_2}, \code{log_sigma1_2}, \code{log_phi2},  \code{log_tau2_2}, \code{log_sigma2_2}, \code{log_slope1}, \code{log_slope2}, \code{c_factor1}, \code{c_factor1}, \code{c_factor1}, \code{c_factor1}, \code{c_factor1}, \code{c_factor1}, \code{c_factor2}, \code{c_factor2}, \code{c_factor2}, \code{c_factor2}, \code{c_factor2}, \code{c_factor2}.}

\item{upper.lim}{A vector of upper bounds for the parameters with the parameter order corresponding to that in \code{lower.lim}.}
}
\value{
A list of the model fit results including the parameter estimates, the number of iterations taken and the \code{nlminb} convergence code. This is the output of the \code{nlminb} function applied to minimise the negative log-likelihood of the spatial ordinal model together with the field estimates and the estimated parameter standard errors.
}
\description{
Fit a spatial ordinal model based on damage data for two building categories.
}
\examples{
library(MASS)
data(damage_simulation)

data.subset.1 <- damage_simulation[damage_simulation$building_cat == 1, ]
data.subset.2 <- damage_simulation[damage_simulation$building_cat == 2, ]

frag.model.1 <- polr(CDF ~ logPGA, data = data.subset.1,
                    method = "probit", Hess = TRUE)
frag.model.2 <- polr(CDF ~ logPGA, data = data.subset.2,
                    method = "probit", Hess = TRUE)

# Set some reasonable upper and lower limits for parameters:
lower_lim <- rep(-Inf, 23); upper_lim <- rep(Inf, 23);

log_phi_max <- log(3); log_phi_min <- log(0.05);

log_slope1_max <- log(1.5*frag.model.1$coefficients);
log_slope1_min <- log(0.5*frag.model.2$coefficients)
log_slope2_max <- log(1.5*frag.model.1$coefficients);
log_slope2_min <- log(0.5*frag.model.2$coefficients)

cutoff.1.start <- frag.model.1$zeta
cutoff.2.start <- frag.model.2$zeta

# Reparameterising cut-offs to ensure increasing order in optimisation:
first_cutoff1 <-  cutoff.1.start[1]
first_cutoff2 <-  cutoff.2.start[1]

cutoff_factors <- function(cutoffs){
 temp <- rep(NA, length(cutoffs)-1)
 for (i in 2:length(cutoffs)){
   temp[i-1] <- cutoffs[i]-cutoffs[i-1]
 }
 return(temp)
}

cutoff_factors1 <- cutoff_factors(cutoff.1.start)
cutoff_factors2 <- cutoff_factors(cutoff.2.start)

factor_max <- 5*max(c(cutoff_factors1, cutoff_factors2));
factor_min <- 0.5*min(c(cutoff_factors1, cutoff_factors2))

lower_lim[1] <- log_phi_min;

lower_lim[10] <- log_slope1_min; lower_lim[11] <- log_slope2_min;

lower_lim[12:17] <- c(-Inf, rep(factor_min, length(cutoff_factors1)));
lower_lim[18:23] <- c(-Inf, rep(factor_min, length(cutoff_factors2)));

upper_lim[10] <- log_slope1_max;  upper_lim[11] <- log_slope2_max;
upper_lim[12:17] <- c(Inf, rep(factor_max, length(cutoff_factors1)));
upper_lim[18:23] <- c(Inf, rep(factor_max, length(cutoff_factors2)));
upper_lim[3] <- -2;

# The following takes 8 minutes on a PC with characteristics:
# Intel(R) Xeon (R) W-2112 CPU Processor @ 3.60GHz; 32GB of RAM; Windows 10 64-bit:
#temp.time <- proc.time()[3]
#spatial_fit <- spatial_ordinal(frag.model.1, frag.model.2,
#                              data.subset.1, data.subset.2,
#                              lower.lim = lower_lim,
#                             upper.lim = upper_lim)
#time.taken <- proc.time()[3] - temp.time
}
